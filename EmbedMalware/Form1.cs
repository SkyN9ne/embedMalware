using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Threading;
using System.Security.Cryptography;


namespace EmbedMalware
{
    public partial class Form1 : Form
    {
        int EXESize;
        int JPEGSize;
     //   int start; // count the start location of EXE insertion in JPEG binary
        int last;// count the last location of EXE insertion in JPEG binary
        string EmbedEXE;
        string EmbedJPEG;
        //string NewEmbedJPEG;
        string EmbedAllJPEG;

        //-------------ok------------
                    //path for all dirs
            string strPathJPG=@"C:\project\JPEG1";
            string strPathEXE=@"C:\project\EXE";
            string strPathEmbed = @"C:\project\Embedded";
            string strPathRestoredJPG=@"C:\project\Restored~JPEG";
            string strPathRestoredEXE=@"C:\project\Restored~EXE";

          //// all variables related to checkHash()
          // check hash values
            string strOriEXE = ""; 
            string strOriJPG = "";
            string strEmbedFile = "";
            string strRestoredFile = "";
            string strRestoredEXE = "";
        //------------------------------

        static Random
            rdm = new Random();
        
        //generate form each time executed

        public Form1()
        {
            InitializeComponent();
        }

        //button when click will reset the text area
        private void clear_Click(object sender, EventArgs e)
        {
            this.Text = "";
            rtbOut1.Clear();
        }

        //this method will embed the JPEG file with exe file

       
        //used by checkHash function
        static string ByteArrayToString(byte[] arrInput)  
        {
            int i = 0;
            StringBuilder sOutput = new StringBuilder(arrInput.Length);
            for (i = 0; i < arrInput.Length - 1; i++)
            {
                sOutput.Append(arrInput[i].ToString("X2"));
            }
            return sOutput.ToString();
        }

        private void checkHash( )
        { 
          byte[] RestoredEXE = File.ReadAllBytes(strPathRestoredEXE + strRestoredEXE);
            rtbOut1.AppendText("EXE's restored Length " + RestoredEXE.Length + "\n"); ;
            byte[] RestoredJPG = File.ReadAllBytes(strPathRestoredJPG + strRestoredFile);
            rtbOut1.AppendText("JPEG's restored Length " + RestoredJPG.Length + "\n"); ;
            this.Text = "Done"; rtbOut1.AppendText("\n\n\n");

            //compute HASH value

            byte[] tmpSource;
            byte[] tmpSource2;
            byte[] tmpSourceEXE;
            byte[] tmpHash;
            byte[] tmpHashEXE;
            
            // SourceData
            tmpSource = File.ReadAllBytes(strPathJPG + strOriJPG);
            //Create a byte array from source data
            
            //Compute hash based on source data
            tmpHash = new MD5CryptoServiceProvider().ComputeHash(tmpSource);
            rtbOut1.AppendText("JPEG's Integrity Verification" + "\n\n\n" + " Original JPEG Hash Value: " + ByteArrayToString(tmpHash) + "\n");

            //read all byte in strPathEmbed
            tmpSource2 = File.ReadAllBytes(strPathEmbed + strEmbedFile);

            byte[] tmpNewHash;

            tmpNewHash = new MD5CryptoServiceProvider().ComputeHash(tmpSource2);
            rtbOut1.AppendText(" Embedded JPEG Hash Value: " + ByteArrayToString(tmpNewHash) + "\n");

           
         
            //Source EXE
             tmpSourceEXE = File.ReadAllBytes(strPathEXE + strOriEXE);
            //Create a byte array from source data

            //////Compute hash based on source data
            tmpHashEXE = new MD5CryptoServiceProvider().ComputeHash(tmpSourceEXE);
            rtbOut1.AppendText("EXE's Integrity Verification" + "\n\n\n" + " Original EXE Hash Value: " + ByteArrayToString(tmpHashEXE) + "\n");

    
          //write the data in log file
              StreamWriter SWL = File.AppendText(@"C:\project\Embedded Data\LogFile.txt");
                  SWL.WriteLine("Total EXE:" + EXETotal );
                  SWL.WriteLine("Total JPEG:" + sizeJPEG );
                 // SWL.WriteLine("Begin inserting EXE binary at :" + location);  lost the variable 'location'
                  SWL.WriteLine("Stop inserting EXE binary at :" + last ); 
                  SWL.WriteLine("EXE's restored Length " + RestoredEXE.Length ); 
                  SWL.WriteLine("JPEG's restored Length " + RestoredJPG.Length ); 
                  SWL.WriteLine(" Original JPEG Hash Value: " + ByteArrayToString(tmpHash) ); 
                  SWL.WriteLine(" Embedded JPEG Hash Value: " + ByteArrayToString(tmpNewHash)); 
           //       SWL.WriteLine("Restored JPEG Hash Value:" + ByteArrayToString(tmpNewHash1));
               SWL.Close();
              rtbOut1.AppendText("\n Compare the " + strPathJPG + strOriJPG + " with " + strPathEmbed + strEmbedFile + "\n");
            CompareHash(tmpHash,tmpNewHash);

            //------------source3
            tmpSource2 = File.ReadAllBytes(strPathRestoredJPG + strRestoredFile);

            tmpNewHash = null; ;

            tmpNewHash = new MD5CryptoServiceProvider().ComputeHash(tmpSource2);
            rtbOut1.AppendText(" Embedded JPEG Hash Value: " + ByteArrayToString(tmpNewHash) + "\n");


            rtbOut1.AppendText("\n Compare the " + strPathJPG + strOriJPG + " with " + strPathRestoredJPG + strRestoredFile + "\n");

            CompareHash(tmpHash, tmpNewHash);
           
        }

        //used in check hash method
        void CompareHash(byte[] tmpHash, byte[] tmpNewHash)
        {
         
            bool bEqual = false;
        if (tmpNewHash.Length == tmpHash.Length)
        {
            int i = 0;
        while ((i < tmpNewHash.Length) && (tmpNewHash[i] == tmpHash[i]))
        {
            i += 1;
        }
            if (i == tmpNewHash.Length)
            {
                bEqual = true;
            }
        }

            if (bEqual)
                rtbOut1.AppendText("The two hash values are the same\n\n");

            else
                rtbOut1.AppendText("The two hash values are not the same\n\n");
            // Console.ReadLine();
        }


       //button extract that will trigger extract funtion
        private void btnExtract_Click(object sender, EventArgs e)
        {
            Extract();
        }

        //this method perform extract method
        private void Extract()
        {
            byte[] EXE = File.ReadAllBytes(txtEXE.Text);
            byte[] NewJPEG = File.ReadAllBytes(txtNewJPEG.Text);

            int EXESize = EXE.Length;
            int JPEGSize = NewJPEG.Length;

            FileStream fsRestoredNewJPEG = File.Create(@"C:\project\log1.txt");
            BinaryWriter SWW2 = new BinaryWriter(fsRestoredNewJPEG);
            FileStream fsRestoredJPEG = File.Create(@"C:\project\Extracted File JPEG\ExtractedJPEG.jpg");
            BinaryWriter SWRestoreJPEG = new BinaryWriter(fsRestoredJPEG);

            // implant exe at random location number
            int at = NewJPEG.Length;
            int cnt = 0;


            foreach (byte x in NewJPEG)
            {
               //extract EXE from JPEG

                if ((cnt >= NewJPEG.Length - EXESize))
                {
                    SWW2.Write((byte)(x + 1));
                    //d++;
                }
                else
                {
                    SWRestoreJPEG.Write(x);

                } cnt++;
                // return;
            }

            SWW2.Close();
            SWRestoreJPEG.Close();

            byte[] RestoredNewJPEG = File.ReadAllBytes(@"C:\project\Extracted File JPEG\ExtractedJPEG.jpg");
            rtbOut1.AppendText("Size of Embedded JPEG is: " + NewJPEG.Length + "\n" + "Size of Original JPEG is: " + RestoredNewJPEG.Length + "\n"); ;
            StreamWriter EXT = File.AppendText(@"C:\project\Extracted File JPEG\ExtractedJPEG.txt");

            foreach (byte x in RestoredNewJPEG)
            {
                EXT.WriteLine("Size of Embedded JPEG is: " + NewJPEG.Length + "\n" + "Size of Original JPEG is: " + RestoredNewJPEG.Length + "\n");
            }
            EXT.Close();
        }

        private void PatternJPEG_Click(object sender, EventArgs e)
        {
          //this section evaluate the pattern of the jpeg file

            byte[] JPEG = File.ReadAllBytes(txtNewJPEG.Text);

            int sizeJPEG = JPEG.Length;

            int window = sizeJPEG / 100;
            int counter = 0;
            List<int> list = new List<int>();
            rtbOut1.AppendText(" Max ,Min, Average\n");
            foreach (byte i in JPEG)
            {
                counter++;

                if (counter == window)
                {
                    list.Add(i);
                    counter = 0;
                    int max = list.Max();
                    int min = list.Min();
                    int av = Convert.ToInt32(list.Average());
                    list.Clear();
                    rtbOut1.AppendText("\"" + max + "\"" + ",\"" + min + "\"" + ",\"" + av + "\"\n");
                }
                else
                {
                    list.Add(i);

                }
            }
        }

        private void btnEA_Click(object sender, EventArgs e)
        {
            List<string> files = new List<string>();
            string[] arr = Directory.GetFiles(@"C:\project\EXE");
            string[] arr1 = Directory.GetFiles(@"C:\project\JPEG1");
            int TotalFileEXE = arr.Length;
            int TotalFileJPEG = arr1.Length;

            rtbOut1.AppendText("Total EXE Files:" + TotalFileEXE + "\n" + "Total JPEG Files:" + TotalFileJPEG + "\n\n");
   
            String[] filesW = Directory.GetFiles(@"C:\project\Embedded");

            foreach (String fW in filesW)
            {
                File.Delete(fW);
            }



            //File.Delete(@"C:\project\Embedded\*.JPG");
        

            // take each files from the EXE dir. and JPEG dir. to combine the binary
            for (int c = 0; c < arr.Length; c++)
            {
                if (c == 2) break; //single embed
                EmbedEXE = arr[c];
                EmbedJPEG = arr1[c];
            
                EmbedAll();
             }
          }

        public void EmbedAll()
        {
            byte[] AllEXE = File.ReadAllBytes(EmbedEXE);
            byte[] AllJPEG = File.ReadAllBytes(EmbedJPEG);

            EXESize = AllEXE.Length;
            JPEGSize = AllJPEG.Length;
          int middlePoint=  JPEGSize / 2;
          int toleranceRange = 100;
          int at = rdm.Next(middlePoint - toleranceRange, middlePoint - toleranceRange);// implant exe at certain location
           // int location = JPEGSize - at;
            rtbOut1.AppendText("Total EXE:" + EXESize + "\n\n" + "Total JPEG:" + JPEGSize + "," + "middlePoint" + "," + middlePoint + "," + "at" + "," + at + "\n\n");
          //  StreamWriter EA = File.AppendText(@"C:\project\Embed All\JPEGBinary.txt");
            List<byte> JPEGBinary = new List<byte>(AllJPEG);
            foreach (byte j in AllJPEG)
            {
                JPEGBinary.Add(Convert.ToByte(j));
              //  EA.WriteLine(j);
            }
         //   EA.Close();

        
        //    StreamReader ReadTemp = new StreamReader(@"C:\project\Embed All\JPEGBinary.txt");

       //     for (int count = 0; count < JPEGSize; count++)
            {
        //        JPEGBinary.Add(Convert.ToByte(ReadTemp.ReadLine()));
            }
      //      ReadTemp.Close();

            byte[] TempJPEGBinary = JPEGBinary.ToArray(); 
            string[] shortFileNames = EmbedJPEG.Split('\\');

            File.Delete(@"C:\project\Embed All\" + shortFileNames[shortFileNames.Length - 1]);

           //  at;
            FileStream fs = File.Create(@"C:\project\Embed All\" + shortFileNames[shortFileNames.Length - 1]);
            BinaryWriter SWW = new BinaryWriter(fs);

            bool t = false;
            List<byte> Raw = new List<byte>();
            int count = 0;
            foreach (byte aa in TempJPEGBinary)
            {
                count++;
                if (count == at)
                {
                    last = 0;
                    //insert EXE binary data
                   foreach (byte c in AllEXE)
                    {
                       if (t == false)
                        {
                            t = true;
                            rtbOut1.AppendText("Begin inserting EXE binary at :" + at + "\nfirst byte is :" + c + "\n");
                        }
                        if (last == AllEXE.Length)
                         {
                            rtbOut1.AppendText("last s :" + c + "\n");
                            rtbOut1.AppendText("Stop inserting EXE binary at :" + last + "\n");
                         }
                        int hhData = 0;
                        if (c + 1 <= 255)
                        { hhData = c + 1; }
                        else
                        { hhData = (255-( c + 1)); }

                            SWW.Write((byte)(hhData)); //ceasar key

                        last++;
                    }
                    SWW.Write(aa);
                }
                else
                {
                    SWW.Write(aa);
                }
               // start++;
            }
            SWW.Close();

    
            //restore exe and jpeg files
            byte[] NewJPEG = File.ReadAllBytes(@"C:\project\Embed All\" + shortFileNames[shortFileNames.Length - 1]);
            int NewJPEGlength = NewJPEG.Length;
            FileStream fsRestoredEXE = File.Create(@"C:\project\Embed All 1\Restored EXE\" + shortFileNames[shortFileNames.Length - 1] + "Restored EXE.txt");
            BinaryWriter binEXE = new BinaryWriter(fsRestoredEXE);
            FileStream fsRestoredJPEG = File.Create(@"C:\project\Embed All 1\Restored JPEG\" + shortFileNames[shortFileNames.Length - 1] + "Restored JPEG.jpg");
            BinaryWriter binJPEG = new BinaryWriter(fsRestoredJPEG);
            int cnt = 1;
            int d = 1;
            foreach (byte x in NewJPEG)
             {//location

                if ((cnt >= AllJPEG.Length - at) && (d <= EXESize))
                  {
                    binEXE.Write((byte)(x - 1));
                    d++;
                  }
                else
                  {
                    binJPEG.Write(x);
                  } 
                cnt++;
             }

            binEXE.Close();
            binJPEG.Close();
            //End restore

            byte[] RestoredEXE = File.ReadAllBytes(@"C:\project\Embed All 1\Restored EXE\" + shortFileNames[shortFileNames.Length - 1] + "Restored EXE.txt");
            rtbOut1.AppendText("EXE's restored Length " + RestoredEXE.Length + "\n"); ;
            byte[] RestoredJPG = File.ReadAllBytes(@"C:\project\Embed All 1\Restored JPEG\" + shortFileNames[shortFileNames.Length - 1] + "Restored JPEG.jpg");
            rtbOut1.AppendText("JPEG's restored Length " + RestoredJPG.Length + "\n"); ;
            this.Text = "Done"; rtbOut1.AppendText("\n");
            
            
             //compute HASH value
            byte[] tmpSource2;
            byte[] tmpSource3;

            tmpSource2 = File.ReadAllBytes(@"C:\project\Embed All\" + shortFileNames[shortFileNames.Length - 1]);

            byte[] tmpNewHash; 

            tmpNewHash = new MD5CryptoServiceProvider().ComputeHash(tmpSource2);
            rtbOut1.AppendText(" Embedded JPEG Hash Value: " + ByteArrayToString2 (tmpNewHash) + "\n\n");

            tmpSource3 = File.ReadAllBytes(EmbedJPEG);

            byte[] tmpNewHash1;

            tmpNewHash1 = new MD5CryptoServiceProvider().ComputeHash(tmpSource3);
            rtbOut1.AppendText(" Original JPEG Hash Value: " + ByteArrayToString2(tmpNewHash1) + "\n");

            //write the data in log file
            StreamWriter SWL = File.AppendText(@"C:\project\Embed All\LogData.txt");
            SWL.WriteLine("Total EXE:" + EXESize + "," + "\r\n" + "Total JPEG:" + JPEGSize + "," + "\r\n" + "Begin inserting EXE binary at :" + at + "," + "\r\n" + "Stop inserting EXE binary at :" + last + "," + "\r\n" + "Original JPEG's Hash Value: " + ByteArrayToString2(tmpNewHash1) + "," + "\r\n" + "Embedded JPEG's Hash Value:" + ByteArrayToString2(tmpNewHash) + "\r\n");
            SWL.WriteLine("=================================================");
            SWL.Close();
           
        }

        //used by hash function in embedAll method
        static string ByteArrayToString2(byte[] arrInput1) 
        {
            int i = 0;
            StringBuilder sOutput = new StringBuilder(arrInput1.Length);
            for (i = 0; i < arrInput1.Length - 1; i++)
            {
                sOutput.Append(arrInput1[i].ToString("X2"));
            }
            return sOutput.ToString();
        }
        
    
        private void btnExtractAll_Click(object sender, EventArgs e)
        {
            List<string> files = new List<string>();
            //string[] shortFileNamesAll = EmbedAllJPEG.Split('\\'); 
            string[] arr2 = Directory.GetFiles(@"C:\project\Embed All");

            //int TotalFileJPEG = arr2.Length;

            for (int c = 0; c < arr2.Length; c++)
            {
                EmbedAllJPEG = arr2[c];
                ExtractAll();
                // break;
            }
        }
        public void ExtractAll()
        {
            File.Delete(@"C:\project\Extracted File JPEG\ExtractedJPEG.jpg");
            string[] arr1 = Directory.GetFiles(@"C:\project\EXE");
            string[] shortFileNamesEXE = EmbedEXE.Split('\\');
            string[] shortFileNamesAll = EmbedAllJPEG.Split('\\');

            //read byte of infected JPEG
            byte[] AllEmbedJPEG = File.ReadAllBytes(EmbedAllJPEG);
            //read byte of malware
            byte[] EXE = File.ReadAllBytes(@"C:\project\EXE" + shortFileNamesEXE[shortFileNamesEXE.Length - 1]);

            //string[] arr2 = Directory.GetFiles(@"C:\project\Embed All\");
            //string[] arr3 = Directory.GetFiles(@"C:\project\Embed All\" + shortFileNames[shortFileNames.Length - 1]);

            // for (int k = 0; k < arr2.Length; k++)
            // {
            //    EmbedAllJPEG = arr2[k];
            // }

            //read infected jpeg byte
            //byte[] NewJPEG = File.ReadAllBytes(@"C:\project\Embed All\" + shortFileNamesAll[shortFileNamesAll.Length - 1]);
            int EXETotal = EXE.Length;
            int sizeJPEG = AllEmbedJPEG.Length;

            StreamWriter EAJ = File.AppendText(@"C:\project\Extracted File JPEG\Log4.txt");

            foreach (byte h in EXE)
            {
                EAJ.WriteLine(h);
            }
            EAJ.Close();

            List<byte> EXEBinary = new List<byte>(EXE);

            StreamReader ReadTemp2 = new StreamReader(@"C:\project\Extracted File JPEG\Log4.txt");

            for (int count = 0; count < sizeJPEG; count++)
            {
                EXEBinary.Add(Convert.ToByte(ReadTemp2.ReadLine()));
            }
            ReadTemp2.Close();

            //convert expression to array variable
            byte[] TempEXEBinary = EXEBinary.ToArray();

            FileStream fsRestoredNewJPEG = File.Create(@"C:\project\Extracted File JPEG\Log1.txt");
            BinaryWriter SWW2 = new BinaryWriter(fsRestoredNewJPEG);
            FileStream fsRestoredJPEG = File.Create(@"C:\project\Extracted File JPEG\" + shortFileNamesAll[shortFileNamesAll.Length - 1]);
            BinaryWriter SWRestoreJPEG = new BinaryWriter(fsRestoredJPEG);

            int at = EXE.Length;
            int cnt = 0;
            bool f = true;
            List<byte> Raw1 = new List<byte>();


            foreach (byte x in EmbedAllJPEG)
            {
                //extract EXE from JPEG

                if ( at == sizeJPEG)
                {
                    SWRestoreJPEG.Write(x);
                    
                    //d++;
                }
                else
                {
                    last = 1;
                    foreach (byte w in EmbedAllJPEG)
                    {
                        if (f == true)
                        {
                            f = false;
                            rtbOut1.AppendText("First byte of exe is: " + w);
                        }
                    }
                    SWW2.Write((byte)(x + 1));
                    last++; 
                    rtbOut1.AppendText("Size of Original JPEG is: " + x + "\n");
                    
                } 
                
                cnt++;
            }

            SWW2.Close();
            SWRestoreJPEG.Close();

            byte[] RestoredNewJPEG = File.ReadAllBytes(@"C:\project\Extracted File JPEG\" + shortFileNamesAll[shortFileNamesAll.Length - 1]);
            rtbOut1.AppendText("Size of Embedded JPEG is: " + EmbedAllJPEG.Length + "\n");
            StreamWriter EXT = File.AppendText(@"C:\project\Extracted File JPEG\ExtractedJPEG.txt");

            foreach (byte x in RestoredNewJPEG)
            {
                EXT.WriteLine("Size of Embedded JPEG is: " + EmbedAllJPEG.Length + "\n" + "Size of Original JPEG is: " + RestoredNewJPEG.Length + "\n");
            }
            EXT.Close();


        }

        public string EXETotal { get; set; }

        public string sizeJPEG { get; set; }

        private void txtEXE_TextChanged(object sender, EventArgs e)
        {

        }

   

   
    }
}






