public void EmbedAll()
        {
            byte[] AllEXE = File.ReadAllBytes(EmbedEXE);
            byte[] AllJPEG = File.ReadAllBytes(EmbedJPEG);

            EXESize = AllEXE.Length;
            JPEGSize = AllJPEG.Length;
        //    double ratio = Convert.ToDouble(EXESize) / JPEGSize;
        //getting the middlepoint value for each jpeg to embed
        //setting the maximum tolerance level to locate the embedded exe
          int middlePoint=  JPEGSize / 2;
          int toleranceRange = 100;
          int at = rdm.Next(middlePoint - toleranceRange, middlePoint - toleranceRange);// implant exe at certain location
          at = at / 6;
          at = middlePoint * 2-300;
            rtbOut1.AppendText("Total EXE:" + EXESize + "\n\n" + "Total JPEG:" + JPEGSize + "," + "middlePoint" + "," + middlePoint + "," + "at" + "," + at + "\n\n");
          
            List<byte> JPEGBinary = new List<byte>(AllJPEG);
            foreach (byte j in AllJPEG)
            {
             //   JPEGBinary.Add(Convert.ToByte(j));
            }
            
            byte[] TempJPEGBinary = JPEGBinary.ToArray(); 
            string[] shortFileNames = EmbedJPEG.Split('\\');

            File.Delete(@"C:\project\Embed All\" + shortFileNames[shortFileNames.Length - 1]);

            FileStream fs = File.Create(@"C:\project\Embed All\" + shortFileNames[shortFileNames.Length - 1]);
            BinaryWriter SWW = new BinaryWriter(fs);

            bool t = false;
            List<byte> Raw = new List<byte>();
            int count = 0;
           // at = TempJPEGBinary.Length / 2;
            foreach (byte aa in TempJPEGBinary)
            {
                count++;
           
                if (count == at)
                {
                    last = 0;
                    //insert EXE binary data
               
                   foreach (byte c in AllEXE)
                    {
                       if (t == false)
                        {
                            t = true;
                            rtbOut1.AppendText("Begin inserting EXE binary at :" + at + "\nfirst byte is :" + c + "\n");
                        }
                        if (last == AllEXE.Length)
                         {
                            rtbOut1.AppendText("last s :" + c + "\n");
                            rtbOut1.AppendText("Stop inserting EXE binary at :" + last + "\n");
                         }

                        int hhData = encode(c, steps);
                        

                             SWW.Write((byte)(hhData)); //ceasar key
                        //    SWW.Write((byte)(156)); //ceasar key
                            last++; 
                    //   if (last > limit)
                      //      { 
                         //       break;
                      //      }
                    }
                    SWW.Write(aa);
                }
                else
                {
                    SWW.Write(aa);
                }
               // start++;
            }
            SWW.Close();

    
            //restore exe and jpeg files
            byte[] NewJPEG = File.ReadAllBytes(@"C:\project\Embed All\" + shortFileNames[shortFileNames.Length - 1]);
            int NewJPEGlength = NewJPEG.Length;
            FileStream fsRestoredEXE = File.Create(@"C:\project\Embed All\Restored EXE\" + shortFileNames[shortFileNames.Length - 1] + "Restored.EXE");
            BinaryWriter binEXE = new BinaryWriter(fsRestoredEXE);
            FileStream fsRestoredJPEG = File.Create(@"C:\project\Embed All\Restored JPEG\" + shortFileNames[shortFileNames.Length - 1] + "Restored JPEG.jpg");
            BinaryWriter binJPEG = new BinaryWriter(fsRestoredJPEG);
            int cnt = 1;
            int d = 1;
            int aaq = at + EXESize;
            for (cnt = at-1; cnt <= aaq; cnt++)//byte x in NewJPEG) //foreach (byte x in NewJPEG)
             {//locationAllJPEG.Length -
                 byte x = NewJPEG[cnt];
                if ((cnt >=  at-1) && (d <= EXESize))
                  {
                      int yy = decode(x, steps);
                      
                      binEXE.Write((byte)(yy));
                      if ((cnt >= at) && (cnt < at+3)) 
                      {
                          byte x1 = NewJPEG[cnt-1];
                          rtbOut1.AppendText("1Begin Restoring EXE binary at :" + cnt + "\nfirst byte is :" + x1 + "\n");
                      }
                    d++;
                  }
                //else
                  {
                 //   binJPEG.Write(x);
                  }
                  if (cnt > (aaq))
                      break;
               // cnt++;
             }

            binEXE.Close();
            binJPEG.Close();
            //End restore

            byte[] RestoredEXE = File.ReadAllBytes(@"C:\project\Embed All\Restored EXE\" + shortFileNames[shortFileNames.Length - 1] + "Restored.EXE");
            rtbOut1.AppendText("EXE's restored Length " + RestoredEXE.Length + "\n"); ;
            byte[] RestoredJPG = File.ReadAllBytes(@"C:\project\Embed All\Restored JPEG\" + shortFileNames[shortFileNames.Length - 1] + "Restored JPEG.jpg");
            rtbOut1.AppendText("JPEG's restored Length " + RestoredJPG.Length + "\n"); ;
            this.Text = "Done"; rtbOut1.AppendText("\n");
            
            
             //compute HASH value
            byte[] tmpSource2;
            byte[] tmpSource3;

            tmpSource2 = File.ReadAllBytes(@"C:\project\Embed All\" + shortFileNames[shortFileNames.Length - 1]);

            byte[] tmpNewHash; 

            tmpNewHash = new MD5CryptoServiceProvider().ComputeHash(tmpSource2);
            rtbOut1.AppendText(" Embedded JPEG Hash Value: " + ByteArrayToString2 (tmpNewHash) + "\n\n");

            tmpSource3 = File.ReadAllBytes(EmbedJPEG);

            byte[] tmpNewHash1;

            tmpNewHash1 = new MD5CryptoServiceProvider().ComputeHash(tmpSource3);
            rtbOut1.AppendText(" Original JPEG Hash Value: " + ByteArrayToString2(tmpNewHash1) + "\n");

            //write the data in log file
            StreamWriter SWL = File.AppendText(@"C:\project\Embed All\LogData.txt");
            SWL.WriteLine("Total EXE:" + EXESize + "," + "\r\n" + "Total JPEG:" + JPEGSize + "," + "\r\n" + "Begin inserting EXE binary at :" + at + "," + "\r\n" + "Stop inserting EXE binary at :" + last + "," + "\r\n" + "Original JPEG's Hash Value: " + ByteArrayToString2(tmpNewHash1) + "," + "\r\n" + "Embedded JPEG's Hash Value:" + ByteArrayToString2(tmpNewHash) + "\r\n");
            SWL.WriteLine("=================================================");
            SWL.Close();
           
        }
        int encode(int bytX,int stpY)
        {
            bytX = bytX + stpY;
            if (bytX == 256)
            { bytX = 0; } 
            if (bytX > 256)
            { bytX = bytX - 256; }
            return bytX; }


        int decode(int bytX,int stpY)
        {
            if (bytX == stpY)
            {
             // return  bytX = 255;
            }
          int u = bytX - stpY;
         // if (bytX==0)
        //  { return bytX - stpY; }
           if (u <= 0)
          {
               bytX = bytX + 256 - stpY; 
           }
          else
          {
              bytX = bytX  - stpY; 
          }
           if (bytX == 256) return 0;
            return bytX;
        }


========================================================
Salam,

at = middlePoint * 2-300; << this is a fix position

You must Change : at = middlePoint * 2-300; to a code using random object. 

example of a random position is >> int at = rdm.Next(middlePoint - toleranceRange, middlePoint - toleranceRange);// implant exe at certain location

see first whether embed in the middle pic corrupt or or.